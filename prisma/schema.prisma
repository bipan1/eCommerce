// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  Review        Review[]
  cart          Cart      @relation(fields: [cartId], references: [id])
  cartId        Int       @unique
  address       Address?  @relation(fields: [addressId], references: [id])
  addressId     Int?
  Order         Order[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  provider          String
  providerAccountId String
  type              String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Product {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  description  String
  price        Decimal
  images       String[]
  category     Category       @relation(fields: [categoryId], references: [id])
  categoryId   Int
  reviews      Review[]
  inventory    Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  CartItem     CartItem[]
  OrderProduct OrderProduct[]
}

model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User?
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Decimal
}

model Address {
  id                      Int      @id @default(autoincrement())
  users                   User[]
  addressLine1            String
  addressLine2            String
  city                    String
  state                   String
  zipCode                 String
  country                 String
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  ordersAsShippingAddress Order[]  @relation("ShippingAddress")
  ordersAsBillingAddress  Order[]  @relation("BillingAddress")
}

model Order {
  id                Int            @id @default(autoincrement())
  user              User           @relation(fields: [userId], references: [id])
  userId            Int
  products          OrderProduct[]
  total             Decimal
  shippingAddress   Address        @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  shippingAddressId Int
  billingAddress    Address        @relation("BillingAddress", fields: [billingAddressId], references: [id])
  billingAddressId  Int
  payment           Payment        @relation(fields: [paymentId], references: [id])
  paymentId         Int            @unique
  status            OrderStatus
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model OrderProduct {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Decimal
}

model Payment {
  id            Int      @id @default(autoincrement())
  order         Order?
  method        String
  transactionId String
  amount        Decimal
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
}
