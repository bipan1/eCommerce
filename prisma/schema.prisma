// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  phoneNumber   String    @default("")
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  cart          Cart      @relation(fields: [cartId], references: [id])
  cartId        Int       @unique
  address       Address?  @relation(fields: [addressId], references: [id])
  addressId     Int?
  Order         Order[]
}

model Guest {
  id          Int      @id @default(autoincrement())
  email       String
  name        String
  address     Address? @relation(fields: [addressId], references: [id])
  addressId   Int?
  phoneNumber String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  subcategories Subcategory[]
}

model Subcategory {
  id         Int       @id @default(autoincrement())
  name       String
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId Int
  products   Product[]
}

model Product {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  description   String
  price         Decimal
  image         String
  subcategory   Subcategory    @relation(fields: [subcategoryId], references: [id])
  subcategoryId Int
  isSpecial     Boolean        @default(false)
  specialPrice  Decimal        @default(0.00)
  outofStock    Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  CartItem      CartItem[]
  OrderProduct  OrderProduct[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User?
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Decimal
}

model Address {
  id                      Int      @id @default(autoincrement())
  users                   User[]
  guests                  Guest[]
  addressLine             String
  suburb                  String
  state                   String
  postcode                Int
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  ordersAsShippingAddress Order[]  @relation("ShippingAddress")
}

model Order {
  id                Int            @id @default(autoincrement())
  user              User?          @relation(fields: [userId], references: [id])
  userId            Int?
  Guest             Guest?         @relation(fields: [guestId], references: [id])
  guestId           Int?
  products          OrderProduct[]
  total             Decimal
  shippingAddress   Address        @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  shippingAddressId Int
  payment           Payment        @relation(fields: [paymentId], references: [id])
  paymentId         Int            @unique
  status            OrderStatus
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model OrderProduct {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Decimal
}

model Payment {
  id            Int      @id @default(autoincrement())
  order         Order?
  method        String
  transactionId String
  amount        Decimal
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
}
